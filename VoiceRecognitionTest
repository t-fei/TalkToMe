//Based on a Speech-To-Text Library example &
// Florian Schulz 2014, http://florianschulz.info/stt/archive/
//1st attempt for combining voice recognition&transformation
//Problem: transformation loops once detects word

color[]       userClr = new color[] { 
  color(0, 219, 252, 255), 
  color(0, 252, 166, 255), 
  color(210, 0, 204, 10), 
  color(66, 0, 255, 10), 
  color(255, 255, 255, 250)
};

import com.getflourish.stt.*;
//int voiceIndex;
//int voiceSpeed;

STT stt;
String result;
String group_positive;
String key = "AIzaSyDr9Red8CxXj5EwHwWYdFT8k7WGqVZ4vsg";

void setup ()
{
  size(600, 600,OPENGL);
  // Init STT automatically starts listening
  stt = new STT(this, key);
  stt.enableDebug();
  stt.setLanguage("en"); 
  stt.enableAutoRecord();

  // Some text to display the result
  textFont(createFont("Arial", 24));
  result = "Say something!";
  group_positive =  "weather|hot|cold|rain|snow|sunny";
}

int points = 4;

void draw () {
  
  float angle = 40;
  background(0);
  text(result, mouseX, mouseY);
  pushMatrix();
  translate(width*0.5, height*0.5);
  rotate(frameCount / 400.0);
  star(0, 0, angle, 100, points, userClr[0], userClr[1]); 
  //(x,y, angle ,edge length, point, color1, color2)
  popMatrix();
  
  String[] m2 = match(result, group_positive );
  if (m2 != null ) {
    points = points + 1;
    println("points = " + points);
    
  } else {
    // This will print to the console, since no match was found.
    println("No match found in '" + result + "'");
  }
}

// Method is called if transcription was successfull 
void transcribe (String utterance, float confidence) 
{
  println(utterance);
  result = utterance;
}

void star(float x, float y, float radius1, float radius2, int npoints, color color1, color color2) {
  float angle = TWO_PI / npoints;
  float halfAngle = angle/2.0;
  beginShape();
  for (float a = 0; a < TWO_PI; a += angle) {
    float sx = x + cos(a) * radius2;
    float sy = y + sin(a) * radius2;
    fill(color1);
    vertex(sx, sy);
    sx = x + cos(a+halfAngle) * radius1;
    sy = y + sin(a+halfAngle) * radius1;
    fill(color2);
    vertex(sx, sy);
  }
  endShape(CLOSE);
}
